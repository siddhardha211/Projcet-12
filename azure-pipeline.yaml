trigger:
- main

variables:
  tag: '$(Build.BuildId)'
  acrName: 'project12acr'
  imageName: 'myapp'
  vmImageName: 'ubuntu-latest'
  resourceGroup: 'Project-12'       # Replace with your AKS resource group
  aksClusterName: 'aks-cluster-project-12'    # Replace with your AKS cluster name

stages:
# -------------------------------
# Stage 1: Build & Push Image
# -------------------------------
- stage: Build
  displayName: Build and Push Image Stage
  jobs:
  - job: BuildAndPush
    displayName: Build and Push Job
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self
      displayName: Checkout Source Code

    - task: AzureCLI@2
      displayName: 'Login to ACR'
      inputs:
        azureSubscription: 'New-Connection-Dev'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login --name $(acrName)

    - task: AzureCLI@2
      displayName: 'Build Docker Image'
      inputs:
        azureSubscription: 'New-Connection-Dev'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          docker build -t $(acrName).azurecr.io/$(imageName):$(tag) -t $(acrName).azurecr.io/$(imageName):latest .

    - task: AzureCLI@2
      displayName: 'Push Docker Image'
      inputs:
        azureSubscription: 'New-Connection-Dev'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          docker push $(acrName).azurecr.io/$(imageName):$(tag)
          docker push $(acrName).azurecr.io/$(imageName):latest

    - task: CopyFiles@2
      displayName: Copy Kubernetes Manifests
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/manifests'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        OverWrite: true

    - task: PublishBuildArtifacts@1
      displayName: Publish Kubernetes Manifests as Artifacts
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'kube-manifests'
        publishLocation: 'Container'

# -------------------------------
# Stage 2: Deploy to AKS
# -------------------------------
- stage: Deploy
  displayName: "Deploy to AKS Stage"
  dependsOn: Build
  jobs:
  - deployment: DeployToAKS
    displayName: "Deploy to AKS"
    environment: "aks-cluster-project-12"
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
            - download: current
              artifact: kube-manifests

            # Deploy manifests using AzureCLI and kubectl
            - task: AzureCLI@2
              displayName: "Deploy to AKS using kubectl"
              inputs:
                azureSubscription: 'New-Connection-Dev'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  # Get AKS credentials
                  az aks get-credentials --resource-group $(resourceGroup) --name $(aksClusterName) --overwrite-existing

                  # Update the image in deployment manifest
                  kubectl set image -f $(Pipeline.Workspace)/kube-manifests/deployment.yaml app1-nginx=$(acrName).azurecr.io/$(imageName):$(tag) --namespace default

                  # Apply manifests
                  kubectl apply -f $(Pipeline.Workspace)/kube-manifests/deployment.yaml --namespace default
                  kubectl apply -f $(Pipeline.Workspace)/kube-manifests/service.yaml --namespace default
