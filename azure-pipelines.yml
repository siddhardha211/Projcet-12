trigger:
  branches:
    include:
      - main   # adjust branch if needed

variables:
  acrName: 'project12acr'                     # your ACR name
  imageName: 'myapp'
  imageTag: '$(Build.BuildId)'                # unique tag per build
  vmImageName: 'ubuntu-latest'
  resourceGroup: 'Project-12'                 # your AKS resource group
  aksClusterName: 'aks-cluster-project-12'    # your AKS cluster name

stages:
# -------------------------------
# Stage 1: Build & Push Image
# -------------------------------
- stage: Build
  displayName: "Build and Push Image Stage"
  jobs:
  - job: BuildAndPush
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self
      displayName: "Checkout Source Code"

    - task: AzureCLI@2
      displayName: "Login to ACR"
      inputs:
        azureSubscription: 'New-Connection-Dev'    # service connection name
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az acr login --name $(acrName)

    - task: AzureCLI@2
      displayName: "Build and Push Multi-Arch Docker Image"
      inputs:
        azureSubscription: 'New-Connection-Dev'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          docker run --privileged --rm tonistiigi/binfmt --install all
          docker buildx create --name multiarch --use || docker buildx use multiarch
          docker buildx inspect --bootstrap
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t $(acrName).azurecr.io/$(imageName):$(imageTag) \
            --push .

    - task: CopyFiles@2
      displayName: "Copy Kubernetes Manifests"
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/manifests'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        OverWrite: true

    - task: PublishBuildArtifacts@1
      displayName: "Publish Kubernetes Manifests as Artifact"
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'kube-manifests'
        publishLocation: 'Container'

# -------------------------------
# Stage 2: Deploy to AKS
# -------------------------------
- stage: Deploy
  displayName: "Deploy to AKS Stage"
  dependsOn: Build
  jobs:
  - job: DeployToAKS
    pool:
      vmImage: $(vmImageName)
    steps:
    - download: current
      artifact: kube-manifests

    - task: AzureCLI@2
      displayName: "Deploy to AKS"
      inputs:
        azureSubscription: 'New-Connection-Dev'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          
          # Get AKS credentials
          az aks get-credentials --resource-group $(resourceGroup) --name $(aksClusterName) --overwrite-existing

          # Inject build tag into deployment.yaml
          sed -i "s|project12acr.azurecr.io/myapp:latest|$(acrName).azurecr.io/$(imageName):$(imageTag)|g" $(Pipeline.Workspace)/kube-manifests/deployment.yaml

          # Apply Kubernetes manifests
          kubectl apply -f $(Pipeline.Workspace)/kube-manifests/deployment.yaml --namespace default
          kubectl apply -f $(Pipeline.Workspace)/kube-manifests/service.yaml --namespace default

          # Verify rollout
          kubectl rollout status deployment/myapp-deployment --namespace default
